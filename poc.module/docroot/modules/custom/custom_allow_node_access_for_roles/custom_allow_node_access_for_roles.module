<?php

/**
 * @file
 * Custom Allow Node Access for Roles..
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Get available roles.
 */
function _custom_allow_node_access_for_roles_get_available_roles(): array {
  $data = &drupal_static(__FUNCTION__);
  if (!isset($data['available_roles'])) {
    $data['available_roles'] = [];

    /** @var \Drupal\user\RoleInterface[] $user_roles */
    $user_roles = user_roles();
    foreach ($user_roles as $rid => $role) {
      if ($rid !== 'authenticated'
        && !$role->isAdmin()
        && !$role->hasPermission('bypass node access')
      ) {
        $data['available_roles'][] = $rid;
      }
    }
  }
  return $data['available_roles'];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function custom_allow_node_access_for_roles_form_field_config_form_alter(&$form, FormStateInterface $form_state) {
  $target_field = 'allow_node_access_for_roles';
  if (($form['default_value']['widget']['#field_name'] ?? '') === $target_field
    && !empty($options = &$form['default_value']['widget']['#options'])
  ) {
    $available_roles = _custom_allow_node_access_for_roles_get_available_roles();
    foreach ($options as $rid => &$markup) {
      if (!in_array($rid, $available_roles, TRUE)) {
        unset($options[$rid]);
        continue;
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function custom_allow_node_access_for_roles_form_field_storage_config_form_alter(&$form, FormStateInterface $form_state) {
  $target_field = 'allow_node_access_for_roles';
  if (($storage = $form_state->getStorage())
    && ($field_config = $storage['field_config'] ?? FALSE)
    && $field_config instanceof FieldConfig
    && $field_config->getTargetEntityTypeId() === 'node'
    && $field_config->getName() === $target_field
    && $field_config->getType() === 'entity_reference'
    && strstr($field_config->getSetting('handler'), ':user_role') !== FALSE
  ) {
    $form['settings']['#disabled'] = TRUE;
    $form['settings']['target_type']['#disabled'] = TRUE;
    $form['cardinality_container']['#disabled'] = TRUE;
    $form['cardinality_container']['cardinality']['#disabled'] = TRUE;
    $form['cardinality_container']['cardinality_number']['#disabled'] = TRUE;
    $form['actions']['#disabled'] = TRUE;
    $form['actions']['submit']['#disabled'] = TRUE;
    $form['#prefix'] = t('The field %field is locked and cannot be edited.', [
      '%field' => $field_config->getLabel(),
    ]);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function custom_allow_node_access_for_roles_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $target_field = 'allow_node_access_for_roles';
  if (!empty($options = &$form[$target_field]['widget']['#options'])) {
    $available_roles = _custom_allow_node_access_for_roles_get_available_roles();
    foreach ($options as $rid => &$markup) {
      if (!in_array($rid, $available_roles, TRUE)) {
        unset($options[$rid]);
        continue;
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function custom_allow_node_access_for_roles_form_node_edit_form_alter(&$form, FormStateInterface $form_state) {
  custom_allow_node_access_for_roles_form_node_form_alter($form, $form_state);
}

/**
 * Implements hook_node_access_records().
 */
function custom_allow_node_access_for_roles_node_access_records(NodeInterface $node) {
  $target_field = 'allow_node_access_for_roles';
  $grants = [];
  if ($node->hasField($target_field) && $values = $node->get($target_field)->getValue()) {
    $allow_roles = array_map(fn ($value) => $value['target_id'] ?? '', $values);
    $available_roles = _custom_allow_node_access_for_roles_get_available_roles();
    foreach ($available_roles as $role) {
      if (in_array($role, $allow_roles, TRUE)) {
        $grants[] = [
          'realm' => 'allow_node_access_for.' . $role,
          'gid' => 1,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
        ];
      }
    }
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function custom_allow_node_access_for_roles_node_grants(AccountInterface $account, $op) {
  $grants = [];
  if ($op === 'view') {
    $user_roles = $account->getRoles();
    $available_roles = _custom_allow_node_access_for_roles_get_available_roles();
    foreach ($available_roles as $role) {
      if (in_array($role, $user_roles, TRUE)) {
        $grants['allow_node_access_for.' . $role] = [1];
      }
    }
  }
  return $grants;
}
